/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * Login Service API
 * Ecosystem The System Guys API Document
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'
import useSwr from 'swr'
import type { Key, SWRConfiguration } from 'swr'
import type {
  RequestLoginRequest,
  RequestSignUpRequest,
  ResponseResponse,
} from '../model'

/**
 * Login User
 * @summary Login User
 */
export const postApiAuthenticationLogin = (
  requestLoginRequest: RequestLoginRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ResponseResponse>> => {
  return axios.post(
    `http://localhost:8080/api/authentication/login`,
    requestLoginRequest,
    options,
  )
}

/**
 * Register User
 * @summary Register User
 */
export const postApiAuthenticationRegister = (
  requestSignUpRequest: RequestSignUpRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ResponseResponse>> => {
  return axios.post(
    `http://localhost:8080/api/authentication/register`,
    requestSignUpRequest,
    options,
  )
}

/**
 * Get Me
 * @summary Get Me
 */
export const getApiMe = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ResponseResponse>> => {
  return axios.get(`http://localhost:8080/api/me`, options)
}

export const getGetApiMeKey = () => [`/api/me`] as const

export type GetApiMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiMe>>
>
export type GetApiMeQueryError = AxiosError<unknown>

/**
 * @summary Get Me
 */
export const useGetApiMe = <TError = AxiosError<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getApiMe>>, TError> & {
    swrKey?: Key
    enabled?: boolean
  }
  axios?: AxiosRequestConfig
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetApiMeKey() : null))
  const swrFn = () => getApiMe(axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  )

  return {
    swrKey,
    ...query,
  }
}
